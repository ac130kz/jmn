package org.jfugue.instruments;

import java.beans.PropertyVetoException;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import org.musician.api.Instrument;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

@ConvertAsProperties(dtd = "-//org.netbeans.modules.musician//InstrumentsTopComponent//EN", autostore = false)
@TopComponent.Description(preferredID = "InstrumentsTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true, position = 10)
@ActionID(category = "Window", id = "org.netbeans.modules.musician.InstrumentsTopComponent")
@ActionReference(path = "Menu/Window", position = 20)
@TopComponent.OpenActionRegistration(displayName = "#CTL_InstrumentsAction", preferredID = "InstrumentsTopComponent")
public final class InstrumentsTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private transient static ExplorerManager explorerManager = new ExplorerManager();
    private static InstrumentsTopComponent instance;
    //private static KeyboardTopComponent keyboard_instance;
    /** path to the icon used by the component and its open action */
    public static final String ICON_PATH = "org/netbeans/modules/musician/resources/java-note-18.png";
    private static final String PREFERRED_ID = "InstrumentsTopComponent";
    private static Instrument instrument;
    private Lookup.Result<Instrument> result = null;

    private InstrumentsTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(InstrumentsTopComponent.class, "CTL_InstrumentsTopComponent"));
        setToolTipText(NbBundle.getMessage(InstrumentsTopComponent.class, "HINT_InstrumentsTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
        explorerManager.setRootContext(new RootNode(new MIDIInstrumentCategories()));
        explorerManager.getRootContext().setDisplayName("Categories");

    }

    public Instrument getInstrument() {
        return instrument;
    }

    public void showInstrument(Instrument instr) {

        Node selNode = null;
        Node[] nodes = explorerManager.getRootContext().getChildren().getNodes();
        for (int i = 0; i < nodes.length; i++) {
            Node[] subNodes = nodes[i].getChildren().getNodes();
            for (int j = 0; j < subNodes.length; j++) {
                if (subNodes[j].getDisplayName().equals(instr.getDescription())) {
                    selNode = subNodes[j];
                    break;
                }
            }
        }
        try {
            explorerManager.setSelectedNodes(new Node[]{selNode});
        } catch (PropertyVetoException ex) {
        }

    }

    public static void setInstrument(Instrument instr) {
        instrument = instr;
        //System.err.println("TODO: If there are any notes selected, set their instrument to: "+instr.getJfugueDescription());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        instrumentPane = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(instrumentPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane instrumentPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(Instrument.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    public void resultChanged(LookupEvent lookupEvent) {
        result = (Lookup.Result) lookupEvent.getSource();
        Collection c = result.allInstances();
        if (!c.isEmpty()) {
            Iterator i = c.iterator();
            while (i.hasNext()) {
                Object o = i.next();
                if (o instanceof Instrument) {
                    Instrument instr = (Instrument) o;
                    showInstrument(instr);
                    setInstrument(instr);
                }
            }
        }
//        else {
//            edtCommands.setText("");
//        }
    }

   
}
