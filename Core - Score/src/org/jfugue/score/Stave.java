/*
 * Stave.java
 *
 * Created on 4 augustus 2006, 14:54
 */

package org.jfugue.score;

import org.jfugue.score.SingleStave;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.Vector;
import org.musician.api.Note;
import org.musician.api.Note;
import org.jfugue.score.ScoreTopComponent;
import org.openide.awt.StatusDisplayer;

/**
 *
 * @author  Pierre Matthijs
 */
public abstract class Stave extends javax.swing.JPanel {
    
    public  ScoreTopComponent parent;
    
    public int interspace = 10, leftMargin = 20, rightMargin = 60;
    public int header = 30, footer = 30;
    
    protected Graphics g;
    
    private Vector<Note> notes = new Vector<>();
    
    public Stave(ScoreTopComponent parent) {
        this.parent = parent;
        initComponents();
        StaveListener listener = new StaveListener(this);
        this.addMouseListener(listener);
        this.addMouseMotionListener(listener);
        this.setFocusable(true);
        this.requestFocusInWindow(); 
        //System.out.println("isFocusable:"+this.isFocusable());
        this.addKeyListener(listener);
        //this.getInputMap().put(KeyStroke.getKeyStroke("F2"),"doSomething");
        //this.getActionMap().put("doSomething",action_f2);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void update(Graphics g) {
        paint(g);
    }
    
    public void paint(Graphics g) {
        // implemented by each subclass
    }
    
    public Note getNoteAtPos(int x, int y) {
        // implemented by each subclass
        return null;
    }

    public Dimension getPreferredSize() {
        return new Dimension( this.getSize().width, header + interspace*4 + footer);
    }
    
    public void addNote(Note note) {

//        Instrument instr = instruments_instance.findInstance().getInstrument();
//        if ( ! instr.getJfugueDescription().equals(instrument.getJfugueDescription())) {
//            instrument = instr;
//            parent.setInstrument(instrument);
//        }
        
        SingleStave tempStave = (SingleStave) parent.getStave();
        String errMessage = tempStave.addNoteCheck(note);
        if (errMessage == "") {
            parent.clearMessageArea();
            tempStave.addNoteBarlineCheck(note);
            notes.addElement(note);
            parent.getScore().addNote(note);
            
            //System.out.println("*** New Note Added ***");
            //note.printNoteInfo();
            
            parent.repaint();

            if ( note.getValue() != -1 ) {
    /*            
                try {
                    // When a note is dropped, play the current instrument, note, octave, and duration:
                    Player player = new Player();
                    Pattern pattern = new Pattern("I[" + instrument.getJfugueDescription() + "] " + note.toString());
                    player.play(pattern);
                    player.close();
                }
                catch(Exception e) {
                }
    */
                StatusDisplayer.getDefault().setStatusText(note.toString());
            }
        } else {
            java.awt.Toolkit.getDefaultToolkit().beep();
            parent.setErrorMessage(errMessage);
        }       
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    public Vector getNotes() {
        return notes;
    }
    
    public void setNotes(Vector<Note> notes) {
        this.notes = notes;
    }
    
}
